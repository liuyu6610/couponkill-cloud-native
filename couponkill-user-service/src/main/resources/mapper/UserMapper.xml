<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aliyun.seckill.couponkilluserservice.mapper.UserMapper">

    <resultMap id="UserResultMap" type="com.aliyun.seckill.common.pojo.User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="phone" column="phone"/>
        <result property="email" column="email"/>
        <result property="status" column="status"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="lastActiveTime" column="last_active_time"/>
    </resultMap>

    <!-- 根据用户名查询用户 -->
    <select id="selectByUsername" resultMap="UserResultMap">
        SELECT id, username, password, phone, email, status, create_time, update_time, last_active_time
        FROM `user`
        WHERE username = #{username}
    </select>

    <!-- 插入用户 -->
    <insert id="insertUser" parameterType="com.aliyun.seckill.common.pojo.User">
        INSERT INTO `user`(id, username, password, phone, email, status, create_time, update_time)
        VALUES(#{id}, #{username}, #{password}, #{phone}, #{email}, #{status}, #{createTime}, #{updateTime})
    </insert>

    <!-- 根据ID查询用户 -->
    <select id="selectById" resultMap="UserResultMap">
        SELECT id, username, password, phone, email, status, create_time, update_time, last_active_time
        FROM `user`
        WHERE id = #{userId}
    </select>

    <!-- 根据ID查询用户（通过id参数） -->
    <select id="selectUserById" resultMap="UserResultMap">
        SELECT id, username, password, phone, email, status, create_time, update_time, last_active_time
        FROM `user`
        WHERE id = #{id}
    </select>

    <!-- 根据用户名和密码查询用户（登录用） -->
    <select id="selectByUsernameAndPassword" resultMap="UserResultMap">
        SELECT id, username, password, phone, email, status, create_time, update_time, last_active_time
        FROM `user`
        WHERE username = #{username} AND password = #{password}
    </select>

    <!-- 查询失效用户 -->
    <select id="selectInactiveUsers" resultMap="UserResultMap">
        SELECT id, username, password, phone, email, status, create_time, update_time, last_active_time
        FROM `user`
        WHERE last_active_time <![CDATA[<]]> #{inactiveThreshold} OR (last_active_time IS NULL AND update_time <![CDATA[<]]> #{inactiveThreshold})
    </select>

    <!-- 更新用户最后活跃时间 -->
    <update id="updateUserLastActiveTime">
        UPDATE `user`
        SET last_active_time = #{lastActiveTime}, update_time = #{lastActiveTime}
        WHERE id = #{userId}
    </update>

</mapper>
