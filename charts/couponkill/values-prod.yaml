# 生产环境配置文件
# 为每个服务指定特定的镜像标签

namespace: couponkill

# CRD安装选项
crd:
  install: true

# 示例资源选项
examples:
  seckill: false

# 依赖服务配置
dependencies:
  enabled: true

# 数据库配置
db:
  host: mysql
  port: 3306
  user: root
  password: password
  database: couponkill
  init:
    enabled: true
    name: db-init
    image:
      repository: crpi-n5rumpjwbqinoz4c.cn-hangzhou.personal.cr.aliyuncs.com/thetestspacefordocker/my-docker
      tag: mysql
      pullPolicy: IfNotPresent

# Redis配置
redis:
  host: redis
  port: 6379
  password: ""
  init:
    enabled: true
    name: redis-init
    image:
      repository: crpi-n5rumpjwbqinoz4c.cn-hangzhou.personal.cr.aliyuncs.com/thetestspacefordocker/my-docker
      tag: redis
      pullPolicy: IfNotPresent

# Kafka配置
kafka:
  broker: broker:9092
  topics: "seckill_order_create,seckill_order_cancel"
  init:
    enabled: true
    name: kafka-init
    image:
      repository: crpi-n5rumpjwbqinoz4c.cn-hangzhou.personal.cr.aliyuncs.com/thetestspacefordocker/my-docker
      tag: kafka
      pullPolicy: IfNotPresent

# RocketMQ配置
rocketmq:
  enabled: true
  name: rocketmq
  image:
    repository: crpi-n5rumpjwbqinoz4c.cn-hangzhou.personal.cr.aliyuncs.com/thetestspacefordocker/my-docker
    tag: rocketmq-namesrv
    pullPolicy: IfNotPresent
  nameServer:
    replicas: 3
    service:
      port: 9876
  broker:
    replicas: 3
    service:
      ports:
        listenPort: 10911
        haListenPort: 10912
  init:
    enabled: true
    name: rocketmq-init
    image:
      repository: crpi-n5rumpjwbqinoz4c.cn-hangzhou.personal.cr.aliyuncs.com/thetestspacefordocker/my-docker
      tag: rocketmq-namesrv
      pullPolicy: IfNotPresent
  topics: "seckill_order_create,seckill_order_cancel"

# Nacos配置
nacos:
  enabled: true
  name: nacos
  image:
    repository: crpi-n5rumpjwbqinoz4c.cn-hangzhou.personal.cr.aliyuncs.com/thetestspacefordocker/my-docker
    tag: nacos-server
    pullPolicy: IfNotPresent
  replicas: 3
  service:
    port: 8848
    # 外部访问配置
    external:
      enabled: true
      type: LoadBalancer
      port: 8848
  storage:
    type: mysql
    mysql:
      host: mysql
      port: 3306
      user: root
      password: password
      database: nacos
  config:
    # Nacos初始配置
    common:
      dataId: common.yaml
      group: DEFAULT_GROUP
      content: |
        spring:
          data:
            redis:
              host: redis
              port: 6379
              lettuce:
                pool:
                  max-active: 50
                  max-idle: 20
                  min-idle: 5
                  max-wait: 2000ms
          cloud:
            sentinel:
              transport:
                dashboard: sentinel-dashboard:8080
                port: 8719
              eager: true
            nacos:
              discovery:
                server-addr: nacos:8848
          datasource:
            url: jdbc:mysql://mysql:3306/couponkill?useSSL=false&serverTimezone=UTC
            username: root
            password: password
            driver-class-name: com.mysql.cj.jdbc.Driver
        rocketmq:
          name-server: rocketmq-namesrv:9876
          producer:
            group: common-producer-group
            send-message-timeout: 3000
            retry-times-when-send-failed: 1
            max-message-size: 4096
        thread-pool:
          async:
            core-pool-size: 16
            max-pool-size: 32
            queue-capacity: 200
            keep-alive-seconds: 60
            rejected-policy: CALLER_RUNS
          order:
            core-pool-size: 20
            max-pool-size: 40
            queue-capacity: 500
            thread-name-prefix: "order-async-"
            keep-alive-seconds: 60
            rejected-policy: CALLER_RUNS
    # 各个服务的分库分表配置
    sharding:
      user:
        dataId: user-service-sharding.yaml
        group: DEFAULT_GROUP
        content: |
          dataSources:
            user-db-0:
              driverClassName: com.mysql.cj.jdbc.Driver
              jdbcUrl: jdbc:mysql://mysql:3306/user_db_0?charset=utf8mb4&parseTime=True&loc=Local
              username: root
              password: password
              dataSourceClassName: com.zaxxer.hikari.HikariDataSource
            user-db-1:
              driverClassName: com.mysql.cj.jdbc.Driver
              jdbcUrl: jdbc:mysql://mysql:3306/user_db_1?charset=utf8mb4&parseTime=True&loc=Local
              username: root
              password: password
              dataSourceClassName: com.zaxxer.hikari.HikariDataSource
          rules:
          - !SHARDING
            tables:
              user:
                actualDataNodes: user-db-$->{0..1}.user
                databaseStrategy:
                  standard:
                    shardingColumn: id
                    shardingAlgorithmName: user-db-inline
              user_coupon_count:
                actualDataNodes: user-db-$->{0..1}.user_coupon_count
                databaseStrategy:
                  standard:
                    shardingColumn: user_id
                    shardingAlgorithmName: user-coupon-count-db-inline
            shardingAlgorithms:
              user-db-inline:
                type: INLINE
                props:
                  algorithm-expression: user-db-$->{id % 2}
              user-coupon-count-db-inline:
                type: INLINE
                props:
                  algorithm-expression: user-db-$->{user_id % 2}
            keyGenerators:
              snowflake:
                type: SNOWFLAKE
                props:
                  worker-id: 1
                  data-center-id: 1
          props:
            sql-show: true
            sql-trace: true
            query-with-cipher-column: false
            sql-comment-parse-enabled: true
      order:
        dataId: order-service-sharding.yaml
        group: DEFAULT_GROUP
        content: |
          dataSources:
            order-db-0:
              driverClassName: com.mysql.cj.jdbc.Driver
              jdbcUrl: jdbc:mysql://mysql:3306/order_db_0?charset=utf8mb4&parseTime=True&loc=Local
              username: root
              password: password
              dataSourceClassName: com.zaxxer.hikari.HikariDataSource
            order-db-1:
              driverClassName: com.mysql.cj.jdbc.Driver
              jdbcUrl: jdbc:mysql://mysql:3306/order_db_1?charset=utf8mb4&parseTime=True&loc=Local
              username: root
              password: password
              dataSourceClassName: com.zaxxer.hikari.HikariDataSource
            order-db-2:
              driverClassName: com.mysql.cj.jdbc.Driver
              jdbcUrl: jdbc:mysql://mysql:3306/order_db_2?charset=utf8mb4&parseTime=True&loc=Local
              username: root
              password: password
              dataSourceClassName: com.zaxxer.hikari.HikariDataSource
            order-db-3:
              driverClassName: com.mysql.cj.jdbc.Driver
              jdbcUrl: jdbc:mysql://mysql:3306/order_db_3?charset=utf8mb4&parseTime=True&loc=Local
              username: root
              password: password
              dataSourceClassName: com.zaxxer.hikari.HikariDataSource
          rules:
          - !SHARDING
            tables:
              order:
                actualDataNodes: order-db-$->{0..3}.order_$->{0..15}
                databaseStrategy:
                  standard:
                    shardingColumn: user_id
                    shardingAlgorithmName: order-db-inline
                tableStrategy:
                  standard:
                    shardingColumn: user_id
                    shardingAlgorithmName: order-table-inline
            shardingAlgorithms:
              order-db-inline:
                type: INLINE
                props:
                  algorithm-expression: order-db-$->{user_id % 4}
              order-table-inline:
                type: INLINE
                props:
                  algorithm-expression: order_$->{user_id % 16}
            keyGenerators:
              snowflake:
                type: SNOWFLAKE
                props:
                  worker-id: 1
                  data-center-id: 1
          props:
            sql-show: true
            query-with-cipher-column: false
            sql-comment-parse-enabled: true
      coupon:
        dataId: coupon-service-sharding.yaml
        group: DEFAULT_GROUP
        content: |
          dataSources:
            coupon-db-0:
              driverClassName: com.mysql.cj.jdbc.Driver
              jdbcUrl: jdbc:mysql://mysql:3306/coupon_db_0?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false
              username: root
              password: password
              dataSourceClassName: com.zaxxer.hikari.HikariDataSource
            coupon-db-1:
              driverClassName: com.mysql.cj.jdbc.Driver
              jdbcUrl: jdbc:mysql://mysql:3306/coupon_db_1?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false
              username: root
              password: password
              dataSourceClassName: com.zaxxer.hikari.HikariDataSource
            coupon-db-2:
              driverClassName: com.mysql.cj.jdbc.Driver
              jdbcUrl: jdbc:mysql://mysql:3306/coupon_db_2?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false
              username: root
              password: password
              dataSourceClassName: com.zaxxer.hikari.HikariDataSource
            coupon-db-3:
              driverClassName: com.mysql.cj.jdbc.Driver
              jdbcUrl: jdbc:mysql://mysql:3306/coupon_db_3?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false
              username: root
              password: password
              dataSourceClassName: com.zaxxer.hikari.HikariDataSource
          rules:
            - !SHARDING
              tables:
                coupon:
                  actualDataNodes: coupon-db-$->{0..3}.coupon_$->{0..15}
                  databaseStrategy:
                    standard:
                      shardingColumn: shard_index
                      shardingAlgorithmName: coupon-db-inline
                  tableStrategy:
                    standard:
                      shardingColumn: shard_index
                      shardingAlgorithmName: coupon-table-inline
                stock_log:
                  actualDataNodes: coupon-db-$->{0..3}.stock_log_$->{0..15}
                  databaseStrategy:
                    standard:
                      shardingColumn: shard_index
                      shardingAlgorithmName: coupon-db-inline
                  tableStrategy:
                    standard:
                      shardingColumn: shard_index
                      shardingAlgorithmName: stock-log-table-inline
              shardingAlgorithms:
                coupon-db-inline:
                  type: INLINE
                  props:
                    algorithm-expression: coupon-db-$->{(int)(shard_index / 16) % 4}
                coupon-table-inline:
                  type: INLINE
                  props:
                    algorithm-expression: coupon_$->{shard_index % 16}
                stock-log-table-inline:
                  type: INLINE
                  props:
                    algorithm-expression: stock_log_$->{shard_index % 16}
              keyGenerators:
                snowflake:
                  type: SNOWFLAKE
                  props:
                    worker-id: 1
                    data-center-id: 1
          props:
            sql-show: true
            query-with-cipher-column: false
            sql-comment-parse-enabled: true

# Sentinel配置
sentinel:
  enabled: true
  name: sentinel
  dashboard:
    image:
      repository: crpi-n5rumpjwbqinoz4c.cn-hangzhou.personal.cr.aliyuncs.com/thetestspacefordocker/my-docker:sentinel-dashboard
      tag: 1.8.5
      pullPolicy: IfNotPresent
    replicas: 2
    service:
      port: 8080
  tokenServer:
    enabled: true
    image:
      repository: sentinel-group/sentinel-token-server
      tag: 1.8.5
      pullPolicy: IfNotPresent
    replicas: 2

# 镜像配置信息
image:
  registry: "crpi-n5rumpjwbqinoz4c.cn-hangzhou.personal.cr.aliyuncs.com/thetestspacefordocker/my-docker"
  tag: "v1.0.0"

# 微服务配置列表
services:
  # Gateway服务配置
  gateway:
    name: couponkill-gateway  # 服务名称
    port: 8080  # 服务端口
    replicas: 2  # 初始副本数
    image:
      name: "gateway"
      tag: "v1.0.0"
    # 水平自动扩缩容配置
    hpa:
      enabled: true  # 是否启用HPA
      minReplicas: 2  # 最小副本数
      maxReplicas: 5  # 最大副本数
      cpu: 70  # CPU使用率触发阈值(百分比)
    # JVM优化参数
    jvmOpts: "-Xms1g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication -XX:+UseCompressedOops -XX:+OptimizeStringConcat -XX:+UseLargePages"
    threadPoolOpts: "-Dserver.tomcat.max-threads=500 -Dserver.tomcat.min-spare-threads=50 -Dserver.tomcat.accept-count=500 -Dserver.tomcat.max-connections=20000"

  # Go秒杀服务配置
  go:
    name: seckill-go-svc
    port: 8090
    replicas: 3
    image: 
      name: "seckill-go"
      tag: "v1.0.0"
    # 水平自动扩缩容配置
    hpa:
      enabled: true  # 是否启用HPA
      minReplicas: 3  # 最小副本数
      maxReplicas: 10  # 最大副本数
      cpu: 70  # CPU使用率触发阈值(百分比)
    # Go运行时优化参数
    goOpts:
      gc: 20
      maxProcs: 4

  # 优惠券服务配置
  coupon:
    name: couponkill-coupon-service
    port: 8081
    replicas: 3
    image:
      name: "coupon"
      tag: "v1.0.0"
    # 水平自动扩缩容配置
    hpa:
      enabled: true  # 是否启用HPA
      minReplicas: 3  # 最小副本数
      maxReplicas: 10  # 最大副本数
      cpu: 60  # CPU使用率触发阈值(百分比)
    # JVM优化参数
    jvmOpts: "-Xms2g -Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication -XX:+UseCompressedOops -XX:+OptimizeStringConcat -XX:+UseLargePages"
    threadPoolOpts: "-Dserver.tomcat.max-threads=300 -Dserver.tomcat.min-spare-threads=30 -Dserver.tomcat.accept-count=200 -Dserver.tomcat.max-connections=8000"

  # 订单服务配置
  order:
    name: couponkill-order-service
    port: 8082
    replicas: 3
    image:
      name: "order"
      tag: "v1.0.0"
    # 水平自动扩缩容配置
    hpa:
      enabled: true  # 是否启用HPA
      minReplicas: 3  # 最小副本数
      maxReplicas: 10  # 最大副本数
      cpu: 60  # CPU使用率触发阈值(百分比)
    # JVM优化参数
    jvmOpts: "-Xms2g -Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication -XX:+UseCompressedOops -XX:+OptimizeStringConcat -XX:+UseLargePages"
    threadPoolOpts: "-Dserver.tomcat.max-threads=400 -Dserver.tomcat.min-spare-threads=50 -Dserver.tomcat.accept-count=300 -Dserver.tomcat.max-connections=10000"

  # 用户服务配置
  user:
    name: couponkill-user-service
    port: 8083
    replicas: 2
    image:
      name: "user"
      tag: "v1.0.0"
    # 水平自动扩缩容配置
    hpa:
      enabled: true  # 是否启用HPA
      minReplicas: 2  # 最小副本数
      maxReplicas: 5  # 最大副本数
      cpu: 60  # CPU使用率触发阈值(百分比)
    # JVM优化参数
    jvmOpts: "-Xms1g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+UseStringDeduplication -XX:+UseCompressedOops -XX:+OptimizeStringConcat -XX:+UseLargePages"
    threadPoolOpts: "-Dserver.tomcat.max-threads=200 -Dserver.tomcat.min-spare-threads=20 -Dserver.tomcat.accept-count=100 -Dserver.tomcat.max-connections=5000"

  # operator配置
  operator:
    name: couponkill-operator
    port: 8084
    replicas: 1
    image:
      name: "operator"
      tag: "v1.0.0"
    # Go运行时优化参数
    goOpts:
      gc: 20
      maxProcs: 4

# Istio 服务网格配置
istio:
  enabled: true
  gateway:
    name: couponkill-gateway
    host: "couponkill.example.com"
    port: 80
    tls: false

  destinationRule:
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        maxRequestsPerConnection: 10
    outlierDetection:
      consecutiveErrors: 5
      interval: 10s
      baseEjectionTime: 30s
      maxEjectionPercent: 10
  virtualService:
    retries:
      attempts: 3
      perTryTimeout: 2s
      retryOn: "5xx,connect-failure,refused-stream"

# KEDA自动扩缩容配置
keda:
  enabled: true
  scaledObject:
    pollingInterval: 30
    cooldownPeriod: 300
    minReplicaCount: 1
    maxReplicaCount: 10
  triggers:
    - type: prometheus
      metadata:
        serverAddress: http://prometheus-server.monitoring.svc.cluster.local
        metricName: http_requests_total
        threshold: '100'
        query: sum(rate(http_requests_total{deployment="couponkill-gateway"}[2m]))

# 监控配置
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
  prometheusRule:
    enabled: true

# 网络策略
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: istio-system
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 8081
        - protocol: TCP
          port: 8082
        - protocol: TCP
          port: 8083
        - protocol: TCP
          port: 8084
        - protocol: TCP
          port: 8090
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: TCP
          port: 53
    - to:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090

# 安全配置
security:
  enabled: true
  podSecurityPolicy:
    enabled: true
  networkPolicy:
    enabled: true

# 日志配置
logging:
  enabled: true
  level: INFO
  format: json