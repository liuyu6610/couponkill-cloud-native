# couponkill 项目的部署配置文件，定义了服务镜像、金丝雀发布策略、自动扩缩容配置以及 Istio 网关设置。
# 该配置用于控制多个微服务的部署行为，包括版本管理、流量分配、基于 Kafka 消费延迟的自动扩缩容以及服务网关配置。

namespace: couponkill

# 镜像配置部分，定义了服务使用的镜像仓库地址和标签
image:
  # 镜像仓库地址
  registry: crpi-n5rumpjwbqinoz4c.cn-hangzhou.personal.cr.aliyuncs.com/thetestspacefordocker/canary-keda-dev
  # 镜像标签

# 金丝雀发布配置部分，定义了各个服务的金丝雀发布策略
# 每个服务的权重总和应为 100，用于控制稳定版本和金丝雀版本之间的流量分配
canary:
  # coupon 服务的金丝雀发布配置
  coupon:
    # 是否启用金丝雀发布
    enabled: true
    # 稳定版本的标签选择器
    stableSubsetLabel: "version=stable"
    # 金丝雀版本的标签选择器
    canarySubsetLabel: "version=canary"
    # 稳定版本的流量权重（百分比）
    weightStable: 90
    # 金丝雀版本的流量权重（百分比）
    weightCanary: 10
  # order 服务的金丝雀发布配置
  order:
    # 是否启用金丝雀发布
    enabled: true
    # 稳定版本的标签选择器
    stableSubsetLabel: "version=stable"
    # 金丝雀版本的标签选择器
    canarySubsetLabel: "version=canary"
    # 稳定版本的流量权重（百分比）
    weightStable: 95
    # 金丝雀版本的流量权重（百分比）
    weightCanary: 5
  # go 服务的金丝雀发布配置
  go:
    # 是否启用金丝雀发布
    enabled: true
    # 稳定版本的标签选择器
    stableSubsetLabel: "version=stable"
    # 金丝雀版本的标签选择器
    canarySubsetLabel: "version=canary"
    # 稳定版本的流量权重（百分比）
    weightStable: 95
    # 金丝雀版本的流量权重（百分比）
    weightCanary: 5

# 监控配置
monitoring:
  enabled: true
  prometheus:
    enabled: true

# Nacos配置
nacos:
  enabled: true
  name: nacos
  image:
    repository: crpi-n5rumpjwbqinoz4c.cn-hangzhou.personal.cr.aliyuncs.com/thetestspacefordocker/my-docker
    tag: nacos-server
    pullPolicy: IfNotPresent
  service:
    port: 8848
  config:
    # Nacos配置加载方式
    # external 表示从外部源加载配置
    external:
      enabled: true
      # 外部配置源地址
      url: "https://raw.githubusercontent.com/your-org/couponkill-configs/main/nacos-configs.zip"
    # 初始化配置
    init:
      enabled: true
      # 初始化脚本
      script: |
        #!/bin/sh
        echo "Initializing Nacos configurations from external source..."
  configWatcher:
    enabled: true
    schedule: "*/5 * * * *"
    image:
      repository: curlimages/curl
      tag: latest
      pullPolicy: IfNotPresent

# MySQL配置
mysql:
  # MySQL集群配置
  cluster:
    # 是否启用集群模式
    enabled: false
    # 集群类型: standalone, master-slave, group-replication, innodb-cluster
    type: standalone
    # 主从复制配置
    masterSlave:
      enabled: false
      master:
        host: mysql-master
        port: 3306
      slaves:
        - host: mysql-slave-0
          port: 3306
        - host: mysql-slave-1
          port: 3306
    # Group Replication配置
    groupReplication:
      enabled: false
      nodes:
        - host: mysql-gr-0
          port: 3306
        - host: mysql-gr-1
          port: 3306
        - host: mysql-gr-2
          port: 3306
    # InnoDB Cluster配置
    innodbCluster:
      enabled: false
      nodes:
        - host: mysql-innodb-0
          port: 3306
        - host: mysql-innodb-1
          port: 3306
        - host: mysql-innodb-2
          port: 3306

# Redis配置
redis:
  # Redis集群配置
  cluster:
    # 是否启用集群模式
    enabled: false
    # 集群类型: standalone, master-slave, sentinel, cluster
    type: standalone
    # 主从复制配置
    masterSlave:
      enabled: false
      master:
        host: redis-master
        port: 6379
      slaves:
        - host: redis-slave-0
          port: 6379
        - host: redis-slave-1
          port: 6379
    # 哨兵模式配置
    sentinel:
      enabled: false
      masterName: mymaster
      sentinels:
        - host: redis-sentinel-0
          port: 26379
        - host: redis-sentinel-1
          port: 26379
        - host: redis-sentinel-2
          port: 26379
    # Redis Cluster模式配置
    redisCluster:
      enabled: false
      nodes:
        - host: redis-node-0
          port: 6379
        - host: redis-node-1
          port: 6379
        - host: redis-node-2
          port: 6379
        - host: redis-node-3
          port: 6379
        - host: redis-node-4
          port: 6379
        - host: redis-node-5
          port: 6379

# RocketMQ配置
rocketmq:
  # RocketMQ集群配置
  cluster:
    # 是否启用集群模式
    enabled: false
    # Name Server配置
    namesrv:
      replicas: 3
    # Broker配置
    broker:
      replicas: 3

# KEDA 自动扩缩容配置部分，基于 Kafka 消费延迟进行扩缩容
keda:
  # 是否启用 KEDA 自动扩缩容
  enabled: true
  # Kafka 配置
  kafka:
    # Kafka broker 地址，示例中使用明文传输，生产环境建议使用 SASL 认证
    bootstrapServers: "broker:9092"
    # coupon-go 边缘服务的扩缩容配置
    goEdge:
      # 是否启用该服务的扩缩容
      enabled: true
      # 对应的 Kubernetes Deployment 名称
      deploymentName: couponkill-go-service
      # 最小副本数
      minReplicaCount: 3
      # 最大副本数
      maxReplicaCount: 50
      # 监控的 Kafka 主题
      topic: "seckill.order.create"
      # 消费者组名称
      consumerGroup: "go-dispatcher"
      # Kafka 消费延迟阈值，当延迟超过该值时触发扩容
      lagThreshold: "1000"
    # order 服务的扩缩容配置
    order:
      # 是否启用该服务的扩缩容
      enabled: true
      # 对应的 Kubernetes Deployment 名称
      deploymentName: couponkill-order-service
      # 最小副本数
      minReplicaCount: 2
      # 最大副本数
      maxReplicaCount: 30
      # 监控的 Kafka 主题
      topic: "seckill.order.create"
      # 消费者组名称
      consumerGroup: "order-create"
      # Kafka 消费延迟阈值，当延迟超过该值时触发扩容
      lagThreshold: "1000"

# Istio 网关配置部分，用于暴露服务到集群外部
istio:
  # 是否启用 Istio 网关
  enabled: true
  # 网关配置
  gateway:
    # 网关名称
    name: couponkill-gw
    # 网关绑定的主机名
    host: couponkill.example.com
    # 网关监听的端口
    port: 80
    # 是否启用 TLS，当前为明文传输
    tls: false