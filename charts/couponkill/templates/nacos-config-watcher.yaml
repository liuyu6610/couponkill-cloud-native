{{- if and .Values.nacos.enabled .Values.nacos.configWatcher.enabled }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.nacos.name }}-config-watcher
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.nacos.name }}-config-watcher
spec:
  schedule: "{{ .Values.nacos.configWatcher.schedule }}"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: nacos-config-watcher
              image: "{{ .Values.nacos.configWatcher.image.repository }}:{{ .Values.nacos.configWatcher.image.tag }}"
              imagePullPolicy: {{ .Values.nacos.configWatcher.image.pullPolicy }}
              command:
                - /bin/sh
                - -c
                - |
                  echo "Checking for configuration updates..."
                  
                  {{- if .Values.nacos.config.external.enabled }}
                  # 检查外部配置源是否有更新
                  echo "Checking for external configuration updates from: {{ .Values.nacos.config.external.url }}"
                  
                  # 获取外部配置的ETag或Last-Modified
                  EXT_CONFIG_INFO=$(curl -s -I {{ .Values.nacos.config.external.url }} | grep -E "(ETag|Last-Modified)")
                  CURRENT_EXT_CONFIG_INFO=$(cat /tmp/ext-config-info 2>/dev/null || echo "")
                  
                  if [ "$EXT_CONFIG_INFO" != "$CURRENT_EXT_CONFIG_INFO" ]; then
                    echo "External configuration has been updated. Updating Nacos configurations..."
                    
                    # 下载新的配置包
                    curl -s -L -o /tmp/nacos-configs.zip {{ .Values.nacos.config.external.url }}
                    
                    # 保存新的ETag或Last-Modified信息
                    echo "$EXT_CONFIG_INFO" > /tmp/ext-config-info
                    
                    # 解压并导入配置
                    cd /tmp
                    unzip -o nacos-configs.zip
                    
                    # 遍历配置文件并导入到Nacos
                    for file in *.yaml *.yml *.json; do
                      if [ -f "$file" ]; then
                        echo "Importing configuration file: $file"
                        filename=$(basename "$file")
                        extension="${filename##*.}"
                        dataId="${filename}"
                        group="DEFAULT_GROUP"
                        
                        # 根据文件扩展名设置content-type
                        if [ "$extension" = "yaml" ] || [ "$extension" = "yml" ]; then
                          contentType="application/yaml"
                        elif [ "$extension" = "json" ]; then
                          contentType="application/json"
                        else
                          contentType="text/plain"
                        fi
                        
                        # 导入配置到Nacos
                        curl -X POST "http://{{ .Values.nacos.name }}:{{ .Values.nacos.service.port }}/nacos/v1/cs/configs" \
                          -H "Content-Type: application/x-www-form-urlencoded;charset=utf-8" \
                          --data-urlencode "dataId=$dataId" \
                          --data-urlencode "group=$group" \
                          --data-urlencode "content@./$file" \
                          -H "contentType: $contentType"
                      fi
                    done
                    
                    echo "Nacos configurations updated from external source."
                  else
                    echo "External configuration is up to date."
                  fi
                  {{- else }}
                  # 检查Nacos中配置是否有变更（简化版）
                  echo "External configuration source is not enabled. Skipping configuration update check."
                  {{- end }}
                  
                  echo "Configuration update check completed."
              env:
                - name: NACOS_ADDR
                  value: "{{ .Values.nacos.name }}:{{ .Values.nacos.service.port }}"
          restartPolicy: OnFailure
{{- end }}