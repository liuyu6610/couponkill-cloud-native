# 部署 Coupon 服务的 Deployment 资源定义
# 该资源用于创建和管理 Coupon 服务的 Pod 副本
# 参数:
#   .Values.services.coupon.name: 服务名称
#   .Values.namespace: 命名空间
#   .Values.services.coupon.replicas: 初始副本数
#   .Values.image.registry: 镜像仓库地址
#   .Values.services.coupon.image.name: 镜像名称
#   .Values.services.coupon.image.tag: 镜像标签
#   .Values.services.coupon.port: 容器暴露的端口
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: {{ .Values.services.coupon.name }}
  namespace: {{ .Values.namespace }}
  annotations:
    # 添加配置版本标签，用于配置更新时触发滚动更新
    config-version: "{{ now | date "20060102150405" }}"
spec:
  replicas: {{ .Values.services.coupon.replicas }}
  selector: 
    matchLabels: 
      app: {{ .Values.services.coupon.name }}
  template:
    metadata: 
      labels: 
        app: {{ .Values.services.coupon.name }}
      annotations:
        # 添加配置更新时间戳，用于触发滚动更新
        config-update-time: "{{ now | date "2006-01-02T15:04:05Z07:00" }}"
    spec:
      containers:
        - name: app
          image: "{{ .Values.image.registry }}/{{ .Values.services.coupon.image.name }}:{{ .Values.services.coupon.image.tag }}"
          ports: 
            - containerPort: {{ .Values.services.coupon.port }}
          # 配置就绪探针，检查服务是否准备就绪
          # 初始延迟5秒，每10秒检查一次
          readinessProbe: 
            httpGet: 
              path: /actuator/health
              port: {{ .Values.services.coupon.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
          # 配置存活探针，检查服务是否正常运行
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .Values.services.coupon.port }}
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
          env:
            # 设置 Redis 主机地址
            - name: REDIS_HOST
              value: "redis"
            {{- if .Values.rocketmq.enabled }}
            - name: ROCKET_MQ
              value: "{{ .Values.rocketmq.name }}-namesrv:{{ .Values.rocketmq.nameServer.service.port }}"
            {{- else }}
            - name: KAFKA
              value: "broker:9092"
            {{- end }}
            {{- if .Values.nacos.enabled }}
            {{- if .Values.nacos.cluster.enabled }}
            - name: SPRING_CLOUD_NACOS_SERVER-ADDR
              value: "{{ .Values.nacos.name }}-headless:{{ .Values.nacos.service.port }}"
            {{- else }}
            - name: SPRING_CLOUD_NACOS_SERVER-ADDR
              value: "{{ .Values.nacos.name }}:{{ .Values.nacos.service.port }}"
            {{- end }}
            {{- end }}
            {{- if .Values.sentinel.enabled }}
            - name: SPRING_CLOUD_SENTINEL_TRANSPORT_DASHBOARD
              value: "{{ .Values.sentinel.name }}-dashboard:{{ .Values.sentinel.dashboard.service.port }}"
            {{- end }}
            # JVM优化参数
            {{- if .Values.services.coupon.jvmOpts }}
            - name: JAVA_OPTS
              value: "{{ .Values.services.coupon.jvmOpts }}"
            {{- end }}
            {{- if .Values.services.coupon.threadPoolOpts }}
            - name: THREAD_POOL_OPTS
              value: "{{ .Values.services.coupon.threadPoolOpts }}"
            {{- end }}
            # 添加配置刷新环境变量
            - name: SPRING_CLOUD_NACOS_CONFIG_REFRESH_ENABLED
              value: "true"
            - name: SPRING_CLOUD_NACOS_CONFIG_REFRESH_INTERVAL
              value: "3000"
            # 数据库连接池配置
            - name: SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE
              value: "20"
            - name: SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE
              value: "5"
            - name: SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT
              value: "30000"
            - name: SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT
              value: "600000"
            - name: SPRING_DATASOURCE_HIKARI_MAX_LIFETIME
              value: "1800000"
            # 启用ShardingSphere动态配置
            - name: SHARDINGSPHERE_PROPS_SQL_SHOW
              value: "true"
            - name: SHARDINGSPHERE_PROPS_SQL_TRACE
              value: "true"
          # 资源限制
          resources:
            requests:
              memory: "2Gi"
              cpu: "1"
            limits:
              memory: "4Gi"
              cpu: "2"
          # 挂载配置卷
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
      volumes:
        - name: config-volume
          emptyDir: {}
      # 优雅停止
      terminationGracePeriodSeconds: 30