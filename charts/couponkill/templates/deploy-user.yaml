# charts/couponkill/templates/deploy-user.yaml

# Deployment配置：定义用户服务的部署资源
# 用于创建和管理用户服务的Pod副本
# 参数说明：
#   .Values.services.user.name        - 服务名称
#   .Values.namespace                 - 命名空间
#   .Values.services.user.replicas    - 副本数量
#   .Values.image.registry            - 镜像仓库地址
#   .Values.services.user.image.name  - 镜像名称
#   .Values.services.user.image.tag   - 镜像标签
#   .Values.services.user.port        - 容器端口
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.services.user.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.services.user.name }}
    version: v1
spec:
  replicas: {{ .Values.services.user.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.services.user.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.services.user.name }}
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.services.user.port }}"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: {{ .Values.serviceAccount2.name }}
      containers:
        - name: app
          image: "{{ .Values.image.registry }}:{{ .Values.services.user.image.name }}"
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.services.user.port }}
          # 就绪探针，检查服务是否可用
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .Values.services.user.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          # 存活探针，检查服务是否正常运行
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .Values.services.user.port }}
            initialDelaySeconds: 60
            periodSeconds: 15
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          env:
            - name: SERVER_PORT
              value: "{{ .Values.services.user.port }}"
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:mysql://mysql:3306/couponkill?useSSL=false&serverTimezone=UTC"
            - name: SPRING_DATASOURCE_USERNAME
              value: "root"
            - name: SPRING_DATASOURCE_PASSWORD
              value: "password"
            - name: SPRING_REDIS_HOST
              value: "redis"
            - name: SPRING_REDIS_PORT
              value: "6379"
            {{- if .Values.nacos.enabled }}
            - name: SPRING_CLOUD_NACOS_SERVER-ADDR
              value: "{{ .Values.nacos.name }}:{{ .Values.nacos.service.port }}"
            {{- end }}
            {{- if .Values.sentinel.enabled }}
            - name: SPRING_CLOUD_SENTINEL_TRANSPORT_DASHBOARD
              value: "{{ .Values.sentinel.name }}-dashboard:{{ .Values.sentinel.dashboard.service.port }}"
            {{- end }}
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: secret
            # JVM优化参数
            {{- if .Values.services.user.jvmOpts }}
            - name: JAVA_OPTS
              value: "{{ .Values.services.user.jvmOpts }}"
            {{- end }}
            {{- if .Values.services.user.threadPoolOpts }}
            - name: THREAD_POOL_OPTS
              value: "{{ .Values.services.user.threadPoolOpts }}"
            {{- end }}
---
# Service配置：为用户服务提供稳定的网络访问入口
# 参数说明：
#   .Values.services.user.name        - 服务名称
#   .Values.namespace                 - 命名空间
#   .Values.services.user.port        - 目标端口
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.services.user.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.services.user.name }}
spec:
  selector:
    app: {{ .Values.services.user.name }}
  ports:
    - name: http
      port: 80
      targetPort: {{ .Values.services.user.port }}
  type: ClusterIP

---
# HorizontalPodAutoscaler配置（可选）：根据CPU使用率自动调整Pod副本数
# 条件启用：仅当 .Values.services.user.hpa.enabled 为 true 时生效
# 参数说明：
#   .Values.services.user.name              - 被扩缩容的目标Deployment名称
#   .Values.namespace                       - 命名空间
#   .Values.services.user.hpa.minReplicas   - 最小副本数
#   .Values.services.user.hpa.maxReplicas   - 最大副本数
#   .Values.services.user.hpa.cpu           - 触发扩缩容的CPU平均利用率阈值
{{- if .Values.services.user.hpa.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Values.services.user.name }}
  namespace: {{ .Values.namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Values.services.user.name }}
  minReplicas: {{ .Values.services.user.hpa.minReplicas }}
  maxReplicas: {{ .Values.services.user.hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.services.user.hpa.cpu }}
{{- end }}